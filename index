<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medicare Agent CRM</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Load Inter font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">
    <style>
        /* Custom styles for the app and font setting */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f9fb; /* Light background */
        }
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.5);
            transition: opacity 0.3s ease;
        }
        .prospect-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-1px);
        }
        /* Custom scrollbar for better aesthetics */
        .custom-scroll::-webkit-scrollbar {
            width: 8px;
        }
        .custom-scroll::-webkit-scrollbar-thumb {
            background-color: #a8a8a8;
            border-radius: 10px;
        }
        .custom-scroll::-webkit-scrollbar-track {
            background: #f0f0f0;
        }
    </style>
</head>
<body>

    <!-- Main Application Container -->
    <div class="min-h-screen flex flex-col">
        
        <!-- Header -->
        <header class="bg-white shadow-md p-4 sticky top-0 z-10">
            <div class="flex flex-col md:flex-row justify-between items-center max-w-7xl mx-auto">
                <h1 class="text-2xl font-bold text-teal-600">Medicare CRM Dashboard</h1>
                <div class="text-sm text-gray-600 mt-2 md:mt-0">
                    User: <span id="user-id" class="font-mono bg-gray-100 px-2 py-1 rounded text-xs truncate max-w-xs inline-block">Authenticating...</span>
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <main class="flex-grow p-4 md:p-8 max-w-7xl mx-auto w-full">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-gray-700">Prospects & Clients</h2>
                <button id="add-prospect-btn" class="bg-teal-500 hover:bg-teal-600 text-white font-medium py-2 px-4 rounded-lg shadow-lg transition duration-200">
                    + New Prospect
                </button>
            </div>

            <!-- Filter and Search Bar -->
            <div class="flex flex-col md:flex-row gap-4 mb-6">
                <input type="text" id="search-input" placeholder="Search by name or phone..." class="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150" oninput="filterProspects()">
                <select id="status-filter" class="w-full md:w-56 p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150" onchange="filterProspects()">
                    <option value="">Filter by Status (All)</option>
                    <option value="Lead">Lead</option>
                    <option value="Contacted - Needs SOA">Contacted - Needs SOA</option>
                    <option value="SOA Complete">SOA Complete</option>
                    <option value="Quote Sent">Quote Sent</option>
                    <option value="Enrolled - Medigap">Enrolled - Medigap</option>
                    <option value="Enrolled - MA">Enrolled - MA</option>
                    <option value="Not Interested">Not Interested</option>
                </select>
            </div>

            <!-- Prospect List -->
            <div id="prospects-list" class="space-y-4">
                <div id="loading-message" class="text-center text-gray-500 p-8">Loading prospects...</div>
                <!-- Prospects will be rendered here -->
            </div>
        </main>
    </div>

    <!-- Prospect Management Modal -->
    <div id="prospect-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 modal-overlay">
        <div class="bg-white w-full max-w-4xl max-h-[90vh] rounded-xl shadow-2xl p-6 custom-scroll overflow-y-auto transform transition-all">
            <h3 id="modal-title" class="text-2xl font-bold mb-6 text-teal-600">New Prospect</h3>
            <form id="prospect-form">
                <input type="hidden" id="prospect-doc-id" value="">
                
                <!-- Basic Information -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <label class="block">
                        <span class="text-gray-700 font-medium">Client Name</span>
                        <input type="text" id="prospect-name" required class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500">
                    </label>
                    <label class="block">
                        <span class="text-gray-700 font-medium">Phone Number</span>
                        <input type="tel" id="prospect-phone" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500">
                    </label>
                    <label class="block md:col-span-2">
                        <span class="text-gray-700 font-medium">Status</span>
                        <select id="prospect-status" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500">
                            <option value="Lead">Lead</option>
                            <option value="Contacted - Needs SOA">Contacted - Needs SOA</option>
                            <option value="SOA Complete">SOA Complete</option>
                            <option value="Quote Sent">Quote Sent</option>
                            <option value="Enrolled - Medigap">Enrolled - Medigap</option>
                            <option value="Enrolled - MA">Enrolled - MA</option>
                            <option value="Not Interested">Not Interested</option>
                        </select>
                    </label>
                </div>
                
                <!-- Notes -->
                <div class="mb-8">
                    <label class="block">
                        <span class="text-gray-700 font-medium">Notes</span>
                        <textarea id="prospect-notes" rows="4" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500"></textarea>
                    </label>
                </div>

                <!-- Compliance & Product Tracking -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8 p-6 bg-teal-50 rounded-xl border border-teal-200">
                    
                    <!-- Compliance Section -->
                    <div>
                        <h4 class="text-xl font-semibold mb-4 text-teal-800 border-b pb-2">Compliance Tracking</h4>
                        <div class="space-y-3">
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" id="compliance-recorded" class="form-checkbox h-5 w-5 text-teal-600 rounded">
                                <span class="text-gray-700">Call Recorded</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" id="compliance-soa-taken" class="form-checkbox h-5 w-5 text-teal-600 rounded">
                                <span class="text-gray-700">Scope of Appointment (SOA) Taken</span>
                            </label>
                            <label class="block mt-4">
                                <span class="text-gray-700 font-medium">SOA Date</span>
                                <input type="date" id="compliance-soa-date" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500">
                            </label>
                        </div>
                    </div>

                    <!-- Product Interest Section -->
                    <div>
                        <h4 class="text-xl font-semibold mb-4 text-teal-800 border-b pb-2">Product Interest</h4>
                        <div class="space-y-3">
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" id="product-medigap" class="form-checkbox h-5 w-5 text-teal-600 rounded">
                                <span class="text-gray-700">Medicare Supplement (Medigap)</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" id="product-ma" class="form-checkbox h-5 w-5 text-teal-600 rounded">
                                <span class="text-gray-700">Medicare Advantage (MA)</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" id="product-dvh" class="form-checkbox h-5 w-5 text-teal-600 rounded">
                                <span class="text-gray-700">Dental, Vision, Hearing (DVH)</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" id="product-hip" class="form-checkbox h-5 w-5 text-teal-600 rounded">
                                <span class="text-gray-700">Hospital Indemnity Plan (HIP)</span>
                            </label>
                        </div>
                    </div>
                </div>

                <!-- NEW: Appointment & Sales Tracking -->
                <div class="mb-8 p-6 bg-blue-50 rounded-xl border border-blue-200">
                    <h4 class="text-xl font-semibold mb-4 text-blue-800 border-b pb-2">Appointment & Sales Tracking</h4>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Appointment Date -->
                        <label class="block">
                            <span class="text-gray-700 font-medium">Next Appointment Date</span>
                            <input type="date" id="appointment-date" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                        </label>
                        
                        <!-- Appointment Time -->
                        <label class="block">
                            <span class="text-gray-700 font-medium">Next Appointment Time</span>
                            <input type="time" id="appointment-time" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                        </label>
                        
                        <!-- Sale Value -->
                        <label class="block">
                            <span class="text-gray-700 font-medium">Sale Value (Annualized Premium)</span>
                            <input type="number" id="sale-value" min="0" step="0.01" placeholder="e.g., 1200.00" class="mt-1 block w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                        </label>
                    </div>
                </div>


                <!-- Action Buttons -->
                <div class="flex justify-between items-center pt-4 border-t border-gray-200">
                    <button type="button" id="delete-prospect-btn" class="text-red-600 hover:text-red-700 font-medium py-2 px-4 rounded-lg transition duration-200 hidden">
                        Delete Prospect
                    </button>
                    <div class="flex space-x-4">
                        <button type="button" id="close-modal-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition duration-200">
                            Cancel
                        </button>
                        <button type="submit" id="save-prospect-btn" class="bg-teal-500 hover:bg-teal-600 text-white font-medium py-2 px-6 rounded-lg shadow-md transition duration-200">
                            Save Changes
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal (Custom UI for confirm()) -->
    <div id="delete-confirmation-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 modal-overlay">
        <div class="bg-white w-full max-w-sm rounded-xl shadow-2xl p-6 transform transition-all">
            <h4 class="text-xl font-bold mb-4 text-red-600">Confirm Deletion</h4>
            <p class="text-gray-700 mb-6">Are you sure you want to permanently delete this prospect? This action cannot be undone.</p>
            <div class="flex justify-end space-x-4">
                <button id="cancel-delete-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition duration-200">
                    Cancel
                </button>
                <button id="confirm-delete-btn" class="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg transition duration-200">
                    Delete
                </button>
            </div>
        </div>
    </div>


    <!-- Firebase Scripts (Must be type="module") -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, collection, onSnapshot, setDoc, addDoc, deleteDoc, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global Firebase variables
        let app;
        let db;
        let auth;
        let userId = 'unknown'; // Will be set after auth
        let prospectsList = []; // Array to hold all prospects for filtering/searching

        // Firestore Configuration & Setup
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        const COLLECTION_NAME = 'medicare_prospects';

        // UI Elements
        const prospectListEl = document.getElementById('prospects-list');
        const userIdEl = document.getElementById('user-id');
        const loadingMessageEl = document.getElementById('loading-message');
        const modalEl = document.getElementById('prospect-modal');
        const deleteConfirmModalEl = document.getElementById('delete-confirmation-modal');
        const formEl = document.getElementById('prospect-form');
        const deleteBtn = document.getElementById('delete-prospect-btn');

        // Status color mapping for better visualization
        const statusColors = {
            'Lead': 'bg-blue-100 text-blue-800',
            'Contacted - Needs SOA': 'bg-yellow-100 text-yellow-800',
            'SOA Complete': 'bg-green-100 text-green-800',
            'Quote Sent': 'bg-purple-100 text-purple-800',
            'Enrolled - Medigap': 'bg-teal-100 text-teal-800',
            'Enrolled - MA': 'bg-teal-200 text-teal-800',
            'Not Interested': 'bg-gray-200 text-gray-700',
        };

        /**
         * Initializes Firebase and sets up authentication listener.
         */
        async function initializeFirebase() {
            try {
                // Set debug level for better console logging
                setLogLevel('Debug');

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // Initial authentication attempt
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }

                // Listen for authentication state changes
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdEl.textContent = userId;
                        userIdEl.title = userId;
                        setupRealtimeListener();
                    } else {
                        userId = 'Unauthenticated';
                        userIdEl.textContent = userId;
                        loadingMessageEl.textContent = 'Please log in or refresh.';
                    }
                });

            } catch (error) {
                console.error("Error during Firebase initialization or authentication:", error);
                userIdEl.textContent = 'ERROR';
                loadingMessageEl.textContent = `Error: ${error.message}`;
            }
        }

        /**
         * Returns the path reference for the prospects collection based on the authenticated user.
         */
        function getProspectsCollectionRef() {
            if (!db || !userId) return null;
            const collectionPath = `/artifacts/${appId}/users/${userId}/${COLLECTION_NAME}`;
            return collection(db, collectionPath);
        }

        /**
         * Sets up the real-time Firestore listener for prospects.
         */
        function setupRealtimeListener() {
            const prospectsRef = getProspectsCollectionRef();
            if (!prospectsRef) {
                console.error("Collection reference is null. Cannot set up listener.");
                return;
            }

            // Using onSnapshot for real-time updates
            onSnapshot(prospectsRef, (snapshot) => {
                loadingMessageEl.classList.add('hidden');
                prospectsList = [];
                snapshot.forEach((doc) => {
                    prospectsList.push({ id: doc.id, ...doc.data() });
                });

                // Sort the list by lastContacted (latest first)
                prospectsList.sort((a, b) => (b.lastContacted || 0) - (a.lastContacted || 0));

                renderProspects();

            }, (error) => {
                console.error("Error fetching documents: ", error);
                prospectListEl.innerHTML = `<div class="text-red-600 p-4 bg-red-50 rounded-lg">Error loading data: ${error.message}</div>`;
            });
        }

        /**
         * Renders the prospect list, applying search and filter criteria.
         */
        window.filterProspects = function() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const statusFilter = document.getElementById('status-filter').value;

            const filteredList = prospectsList.filter(prospect => {
                const nameMatch = prospect.name.toLowerCase().includes(searchTerm);
                const phoneMatch = prospect.phone.toLowerCase().includes(searchTerm);
                const statusMatch = !statusFilter || prospect.status === statusFilter;
                return (nameMatch || phoneMatch) && statusMatch;
            });

            renderProspects(filteredList);
        }

        /**
         * Renders the prospect list to the DOM.
         * @param {Array} list - The list of prospects to render (defaults to the full list).
         */
        function renderProspects(list = prospectsList) {
            prospectListEl.innerHTML = '';
            
            if (list.length === 0) {
                prospectListEl.innerHTML = `<p class="text-center text-gray-500 p-8">No prospects found. Click 'New Prospect' to add one!</p>`;
                return;
            }

            list.forEach(prospect => {
                const date = new Date(prospect.lastContacted || Date.now()).toLocaleDateString();
                const statusClass = statusColors[prospect.status] || 'bg-gray-100 text-gray-800';

                const prospectCard = document.createElement('div');
                prospectCard.className = 'prospect-card bg-white p-4 md:p-6 rounded-xl shadow hover:shadow-lg transition duration-200 cursor-pointer border-l-4 border-teal-500';
                prospectCard.dataset.id = prospect.id;
                
                // Format sale value for display if available
                const saleText = prospect.saleValue ? 
                                `<span class="text-green-600 font-bold ml-4">Sale: $${parseFloat(prospect.saleValue).toFixed(2)} AP</span>` : '';

                prospectCard.innerHTML = `
                    <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
                        <div class="mb-2 md:mb-0">
                            <p class="text-lg font-semibold text-gray-800">${prospect.name}</p>
                            <p class="text-sm text-gray-500">${prospect.phone}</p>
                        </div>
                        <div class="flex flex-col md:flex-row md:space-x-4 space-y-2 md:space-y-0 text-sm">
                            <span class="${statusClass} text-xs font-medium px-2.5 py-1 rounded-full text-center min-w-[150px]">${prospect.status}</span>
                            <span class="text-gray-500 text-xs mt-1 md:mt-0">Last Contacted: ${date} ${saleText}</span>
                        </div>
                    </div>
                `;
                prospectCard.addEventListener('click', () => openModal(prospect));
                prospectListEl.appendChild(prospectCard);
            });
        }

        /**
         * Opens the prospect management modal, either for a new or existing record.
         * @param {Object} prospectData - The prospect data object, or null for a new prospect.
         */
        function openModal(prospectData = null) {
            formEl.reset(); // Clear the form
            let isEditing = !!prospectData;
            
            // Set modal title and hidden ID
            document.getElementById('modal-title').textContent = isEditing ? 'Edit Prospect' : 'New Prospect';
            document.getElementById('prospect-doc-id').value = isEditing ? prospectData.id : '';
            
            // Show/Hide Delete button
            deleteBtn.classList.toggle('hidden', !isEditing);
            
            if (isEditing) {
                // Populate the form fields
                document.getElementById('prospect-name').value = prospectData.name || '';
                document.getElementById('prospect-phone').value = prospectData.phone || '';
                document.getElementById('prospect-status').value = prospectData.status || 'Lead';
                document.getElementById('prospect-notes').value = prospectData.notes || '';

                // Compliance
                const compliance = prospectData.compliance || {};
                document.getElementById('compliance-recorded').checked = !!compliance.recorded;
                document.getElementById('compliance-soa-taken').checked = !!compliance.soaTaken;
                document.getElementById('compliance-soa-date').value = compliance.soaDate || '';

                // Products
                const products = prospectData.products || {};
                document.getElementById('product-medigap').checked = !!products.medigap;
                document.getElementById('product-ma').checked = !!products.ma;
                document.getElementById('product-dvh').checked = !!products.dvh;
                document.getElementById('product-hip').checked = !!products.hip;

                // NEW: Appointments & Sales
                document.getElementById('appointment-date').value = prospectData.appointmentDate || '';
                document.getElementById('appointment-time').value = prospectData.appointmentTime || '';
                document.getElementById('sale-value').value = prospectData.saleValue || '';
            }

            modalEl.classList.remove('hidden');
        }

        /**
         * Closes the prospect management modal.
         */
        function closeModal() {
            modalEl.classList.add('hidden');
            formEl.reset();
        }

        /**
         * Saves the prospect data to Firestore (add or update).
         */
        async function saveProspect(event) {
            event.preventDefault();
            
            const docId = document.getElementById('prospect-doc-id').value;
            const isEditing = !!docId;

            const name = document.getElementById('prospect-name').value;
            if (!name) return console.error("Name is required.");

            const prospectData = {
                name: name,
                phone: document.getElementById('prospect-phone').value,
                status: document.getElementById('prospect-status').value,
                notes: document.getElementById('prospect-notes').value,
                lastContacted: Date.now(), // Update last contacted on save
                
                // NEW: Appointment & Sales Fields
                appointmentDate: document.getElementById('appointment-date').value,
                appointmentTime: document.getElementById('appointment-time').value,
                saleValue: document.getElementById('sale-value').value,

                compliance: {
                    recorded: document.getElementById('compliance-recorded').checked,
                    soaTaken: document.getElementById('compliance-soa-taken').checked,
                    soaDate: document.getElementById('compliance-soa-date').value,
                },
                products: {
                    medigap: document.getElementById('product-medigap').checked,
                    ma: document.getElementById('product-ma').checked,
                    dvh: document.getElementById('product-dvh').checked,
                    hip: document.getElementById('product-hip').checked,
                }
            };

            const prospectsRef = getProspectsCollectionRef();
            if (!prospectsRef) return;

            try {
                if (isEditing) {
                    const docRef = doc(prospectsRef, docId);
                    await setDoc(docRef, prospectData);
                    console.log("Document updated with ID: ", docId);
                } else {
                    await addDoc(prospectsRef, prospectData);
                    console.log("New document added.");
                }
                closeModal();
            } catch (e) {
                console.error("Error adding/updating document: ", e);
                // Optionally show an in-modal error message
            }
        }
        
        /**
         * Deletes the prospect after confirmation.
         */
        function handleDeleteConfirmation() {
            const docId = document.getElementById('prospect-doc-id').value;
            if (!docId) return;

            // Show custom confirmation modal
            deleteConfirmModalEl.classList.remove('hidden');

            document.getElementById('confirm-delete-btn').onclick = async () => {
                deleteConfirmModalEl.classList.add('hidden');
                closeModal(); // Close the main prospect modal
                await deleteProspect(docId);
            };

            document.getElementById('cancel-delete-btn').onclick = () => {
                deleteConfirmModalEl.classList.add('hidden');
            };
        }

        /**
         * Performs the actual delete operation in Firestore.
         * @param {string} docId - The ID of the document to delete.
         */
        async function deleteProspect(docId) {
            const prospectsRef = getProspectsCollectionRef();
            if (!prospectsRef) return;
            
            try {
                const docRef = doc(prospectsRef, docId);
                await deleteDoc(docRef);
                console.log("Document successfully deleted!");
            } catch (e) {
                console.error("Error deleting document: ", e);
            }
        }

        // --- Event Listeners ---
        document.getElementById('add-prospect-btn').addEventListener('click', () => openModal(null));
        document.getElementById('close-modal-btn').addEventListener('click', closeModal);
        modalEl.addEventListener('click', (e) => {
            // Close modal when clicking outside the content area
            if (e.target === modalEl) {
                closeModal();
            }
        });

        formEl.addEventListener('submit', saveProspect);
        deleteBtn.addEventListener('click', handleDeleteConfirmation);

        // --- Initialize the App ---
        initializeFirebase();

    </script>
</body>
</html>
